var searchIndex = new Map(JSON.parse('[["c4",{"t":"CCCPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPGPPPPNNNNONNNONNNNNNONNONNNNNNNNGPPPPPPPPPPPFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPFPPPGPPPPPPPPPPPPPPPPPPPPPPPPFPONNNNNNOONNNNNNNNNOHNNNONOONOOOONNNNNNNNNNOO","n":["lexer","parser","vm","Add","And","Assign","Char","CharPointer","Colon","Comma","Cond","DQuote","Dec","Div","Double","EOF","Else","Enum","Eq","Float","Ge","Gt","Hash","Id","If","Inc","Int","LBrace","LBracket","LParen","Lan","Le","Lexer","Long","Lor","Lt","Mod","Mul","Ne","Not","Num","Or","Quote","RBrace","RBracket","RParen","Return","Semicolon","Shl","Short","Shr","Sizeof","Str","Sub","Tilde","Token","Unknown","Void","While","Xor","borrow","","borrow_mut","","chars","clone","clone_into","clone_to_uninit","current_char","eq","fmt","from","","into","","line","new","next_token","peeked","to_owned","tokenize","try_from","","try_into","","type_id","","ASTNode","Assign","BinaryOp","Block","Cond","Decl","DeclAssign","FuncCall","FuncDef","Id","If","Num","Parser","Return","Str","UnaryOp","WhileLoop","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","eq","fmt","from","","into","","new","parse_binary","parse_decl","parse_expr","parse_func_def","parse_if","parse_primary","parse_program","parse_stmt","parse_unary","parse_while","to_owned","try_from","","try_into","","type_id","","args","body","","cond","","condition","else_branch","","expr","left","name","","","","","op","","params","return_type","right","then_branch","","typename","","value","","ADD","ADDR","ADJ","AND","CALL","DEREF","DIV","ENT","EQ","EXIT","Function","GE","GT","IMM","Instruction","JMP","JNZ","JZ","LC","LE","LEA","LEV","LI","LOAD","LT","LoadString","MOD","MUL","NE","OR","PRINTF","PUSH","RETURN","SC","SHL","SHR","SI","STORE","SUB","VM","XOR","ax","borrow","","","borrow_mut","","","bp","call_stack","clone","clone_into","clone_to_uninit","eq","exec_printf","fmt","from","","","functions","generate","into","","","name","new","params","pc","run","sp","stack","start_addr","text","to_owned","try_from","","","try_into","","","type_id","","","variable_stack","variables"],"q":[[0,"c4"],[3,"c4::lexer"],[87,"c4::parser"],[135,"c4::parser::ASTNode"],[161,"c4::vm"],[246,"core::fmt"],[247,"alloc::vec"],[248,"core::result"],[249,"core::any"],[250,"core::option"],[251,"alloc::string"],[252,"std::collections::hash::map"]],"i":"```f0000000000000000000000000000`0000000000000000000000`0000Ad10101110110101000010010101`Al0000000000`0000An101111110101000000000001010101C`CbCdCfCh210CjCl65CnD`Db43883651020Bb000000000`000`000000000000000000000000`0BdBh12012112222120121`012010111101201201201211","f":"````````````````````````````````````````````````````````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0`{{{b{f}}}f}{{b{b{dc}}}h{}}{{bj}h}`{{{b{f}}{b{f}}}l}{{{b{f}}{b{dn}}}A`}{cc{}}0{{}c{}}0`{{{b{Ab}}}Ad}{{{b{dAd}}}f}`{bc{}}{{{b{dAd}}}{{Af{f}}}}{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{bAj}0`````````````````??>>{{{b{Al}}}Al}=<{{{b{Al}}{b{Al}}}l}{{{b{Al}}{b{dn}}}A`};;::{{{Af{f}}}An}{{{b{dAn}}j}{{B`{Al}}}}{{{b{dAn}}}{{B`{Al}}}}0000{{{b{dAn}}}{{Af{Al}}}}111;998877````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00``{{{b{Bb}}}Bb}{{b{b{dc}}}h{}}{{bj}h}{{{b{Bb}}{b{Bb}}}l}{{{b{dBd}}{b{Bf}}{b{{Af{Bf}}}}}h}{{{b{Bb}}{b{dn}}}A`}{cc{}}00`{{{Af{Al}}}{{Bl{{Af{Bb}}{Bj{BfBh}}}}}}{{}c{}}00`{{{Af{Bb}}{Bj{BfBh}}}Bd}``{{{b{dBd}}}Bn}````{bc{}}{c{{Ah{e}}}{}{}}00{{}{{Ah{c}}}{}}00{bAj}00``","D":"Dn","p":[[1,"reference",null,null,1],[0,"mut"],[6,"Token",3],[1,"unit"],[1,"u8"],[1,"bool"],[5,"Formatter",246],[8,"Result",246],[1,"str"],[5,"Lexer",3],[5,"Vec",247],[6,"Result",248,null,1],[5,"TypeId",249],[6,"ASTNode",87],[5,"Parser",87],[6,"Option",250,null,1],[6,"Instruction",161],[5,"VM",161],[5,"String",251],[5,"Function",161],[5,"HashMap",252],[1,"tuple",null,null,1],[1,"i32"],[15,"FuncCall",135],[15,"FuncDef",135],[15,"WhileLoop",135],[15,"Cond",135],[15,"If",135],[15,"UnaryOp",135],[15,"BinaryOp",135],[15,"Assign",135],[15,"Decl",135],[15,"DeclAssign",135]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAM8AEQAAACAAIgAVADkADgBMAAAATwABAFIABQBZAAoAZQAMAIEAKgCtAAIAsQAXAMoADQDZAAAA3QAAAOIAAADkAAEA5wAPAA==","P":[[60,"T"],[65,""],[66,"T"],[67,""],[71,"T"],[73,"U"],[76,""],[79,"T"],[80,""],[81,"U,T"],[83,"U"],[85,""],[104,"T"],[108,""],[109,"T"],[110,""],[113,"T"],[115,"U"],[117,""],[128,"T"],[129,"U,T"],[131,"U"],[133,""],[203,"T"],[211,""],[212,"T"],[213,""],[217,"T"],[221,""],[222,"U"],[226,""],[234,"T"],[235,"U,T"],[238,"U"],[241,""]]}],["c4_rust_Al_Jazirah_Al_Hamra",{"t":"CHCCPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPGPPPPNNNNNONNNNONNNNNNNONNNONNNNNNNNNGPPPPPPPPPPPFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNONNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPFPPPGPPPPPPPPPPPPPPPPPPPPPPPPFPONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHHNNNONOONOOOONNNNNNNNNNOO","n":["lexer","main","parser","vm","Add","And","Assign","Char","CharPointer","Colon","Comma","Cond","DQuote","Dec","Div","Double","EOF","Else","Enum","Eq","Float","Ge","Gt","Hash","Id","If","Inc","Int","LBrace","LBracket","LParen","Lan","Le","Lexer","Long","Lor","Lt","Mod","Mul","Ne","Not","Num","Or","Quote","RBrace","RBracket","RParen","Return","Semicolon","Shl","Short","Shr","Sizeof","Str","Sub","Tilde","Token","Unknown","Void","While","Xor","advance","borrow","","borrow_mut","","chars","clone","clone_into","clone_to_uninit","consume_peek","current_char","eq","fmt","from","","into","","keyword_or_id","line","new","next_token","peek","peeked","skip_whitespace_and_comments","to_owned","tokenize","try_from","","try_into","","type_id","","ASTNode","Assign","BinaryOp","Block","Cond","Decl","DeclAssign","FuncCall","FuncDef","Id","If","Num","Parser","Return","Str","UnaryOp","WhileLoop","advance","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","current","eq","expect","fmt","from","","into","","new","parse_binary","parse_block","parse_decl","parse_expr","parse_func_def","parse_if","parse_primary","parse_program","parse_stmt","parse_unary","parse_while","pending_decls","pos","precedence","to_owned","tokens","try_from","","try_into","","type_id","","args","body","","cond","","condition","else_branch","","expr","left","name","","","","","op","","params","return_type","right","then_branch","","typename","","value","","ADD","ADDR","ADJ","AND","CALL","DEREF","DIV","ENT","EQ","EXIT","Function","GE","GT","IMM","Instruction","JMP","JNZ","JZ","LC","LE","LEA","LEV","LI","LOAD","LT","LoadString","MOD","MUL","NE","OR","PRINTF","PUSH","RETURN","SC","SHL","SHR","SI","STORE","SUB","VM","XOR","ax","borrow","","","borrow_mut","","","bp","call_stack","clone","clone_into","clone_to_uninit","eq","exec_add","exec_addr","exec_adj","exec_call","exec_deref","exec_div","exec_ent","exec_eq","exec_gt","exec_imm","exec_jmp","exec_jz","exec_lea","exec_lev","exec_load","exec_load_string","exec_lt","exec_mod","exec_mul","exec_ne","exec_printf","exec_push","exec_return","exec_store","exec_sub","execute_instruction","fetch","fmt","from","","","functions","generate","generate_node_with_push","into","","","name","new","params","pc","run","sp","stack","start_addr","text","to_owned","try_from","","","try_into","","","type_id","","","variable_stack","variables"],"q":[[0,"c4_rust_Al_Jazirah_Al_Hamra"],[4,"c4_rust_Al_Jazirah_Al_Hamra::lexer"],[93,"c4_rust_Al_Jazirah_Al_Hamra::parser"],[149,"c4_rust_Al_Jazirah_Al_Hamra::parser::ASTNode"],[175,"c4_rust_Al_Jazirah_Al_Hamra::vm"],[287,"core::fmt"],[288,"core::option"],[289,"alloc::vec"],[290,"core::result"],[291,"core::any"],[292,"alloc::string"],[293,"std::collections::hash::map"]],"i":"````j0000000000000000000000000000`0000000000000000000000`0000f0101011100110101000000010010101`Bb0000000000`0000B`01011110101010100000000000000010010101CdCfChCjCl210CnD`65DbDdDf43883651020Bd000000000`000`000000000000000000000000`0BfBn1201211222211111111111111111111111111120121``012010111101201201201211","f":"`{{}b}```````````````````````````````````````````````````````````{{{h{df}}}b}{h{{h{c}}}{}}0{{{h{d}}}{{h{dc}}}{}}0`{{{h{j}}}j}{{h{h{dc}}}b{}}{{hl}b}5`{{{h{j}}{h{j}}}n}{{{h{j}}{h{dA`}}}Ab}{cc{}}0{{}c{}}0{{{h{Ad}}}j}`{{{h{Ad}}}f}{{{h{df}}}j}{{{h{df}}}{{Ah{Af}}}}`={hc{}}{{{h{df}}}{{Aj{j}}}}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{hAn}0`````````````````{{{h{dB`}}}b}{h{{h{c}}}{}}0{{{h{d}}}{{h{dc}}}{}}0{{{h{Bb}}}Bb}{{h{h{dc}}}b{}}{{hl}b}{{{h{B`}}}{{Ah{{h{j}}}}}}{{{h{Bb}}{h{Bb}}}n}{{{h{dB`}}j}b}{{{h{Bb}}{h{dA`}}}Ab}{cc{}}0{{}c{}}0{{{Aj{j}}}B`}{{{h{dB`}}l}{{Ah{Bb}}}}{{{h{dB`}}}{{Ah{Bb}}}}00000{{{h{dB`}}}{{Aj{Bb}}}}111``{{{h{j}}}l}{hc{}}`{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{hAn}0````````````````````````````````````````````````````````````````````{h{{h{c}}}{}}00{{{h{d}}}{{h{dc}}}{}}00``{{{h{Bd}}}Bd}{{h{h{dc}}}b{}}{{hl}b}{{{h{Bd}}{h{Bd}}}n}{{{h{dBf}}}b}{{{h{dBf}}{h{Ad}}}b}{{{h{dBf}}Bh}b}122022{{{h{dBf}}Bj}b}1113{{{h{dBf}}Bl}b}04444{{{h{dBf}}{h{Bl}}{h{{Aj{Bl}}}}}b}55455{{{h{dBf}}}Bd}{{{h{Bd}}{h{dA`}}}Ab}{cc{}}00`{{{Aj{Bb}}}{{Cb{{Aj{Bd}}{C`{BlBn}}}}}}{{{h{Bb}}{h{d{Aj{Bd}}}}n}b}{{}c{}}00`{{{Aj{Bd}}{C`{BlBn}}}Bf}``{{{h{dBf}}}Bj}````{hc{}}{c{{Al{e}}}{}{}}00{{}{{Al{c}}}{}}00{hAn}00``","D":"Fd","p":[[1,"unit"],[0,"mut"],[5,"Lexer",4],[1,"reference",null,null,1],[6,"Token",4],[1,"u8"],[1,"bool"],[5,"Formatter",287],[8,"Result",287],[1,"str"],[1,"char"],[6,"Option",288,null,1],[5,"Vec",289],[6,"Result",290,null,1],[5,"TypeId",291],[5,"Parser",93],[6,"ASTNode",93],[6,"Instruction",175],[5,"VM",175],[1,"usize"],[1,"i32"],[5,"String",292],[5,"Function",175],[5,"HashMap",293],[1,"tuple",null,null,1],[15,"FuncCall",149],[15,"FuncDef",149],[15,"WhileLoop",149],[15,"Cond",149],[15,"If",149],[15,"UnaryOp",149],[15,"BinaryOp",149],[15,"Assign",149],[15,"Decl",149],[15,"DeclAssign",149]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAO0AGAAAACEAIwAVADoAAwA/AAcASAACAFAAAABUAAAAVgAAAFgABQBfAAoAawADAHAABgB4AAAAegAAAIsAAQCOACsAuwACAL8AFwDYACEA+wAGAAUBAAALAQAADQEBABABDwA=","P":[[62,"T"],[67,""],[68,"T"],[69,""],[74,"T"],[76,"U"],[78,""],[85,"T"],[86,""],[87,"U,T"],[89,"U"],[91,""],[111,"T"],[115,""],[116,"T"],[117,""],[122,"T"],[124,"U"],[126,""],[141,"T"],[143,"U,T"],[145,"U"],[147,""],[217,"T"],[225,""],[226,"T"],[227,""],[257,"T"],[261,""],[263,"U"],[267,""],[275,"T"],[276,"U,T"],[279,"U"],[282,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[4532,5689]}