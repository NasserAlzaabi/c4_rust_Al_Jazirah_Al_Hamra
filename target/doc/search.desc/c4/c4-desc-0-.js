searchState.loadedDescShard("c4", 0, "Lexical analyzer that converts source code into tokens\nRepresents the different types of tokens in the C language\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lexer for the given source code\nReturns the next token from the source code\nTokenizes the entire source code\nRepresents a node in the Abstract Syntax Tree\nParser for converting tokens into an Abstract Syntax Tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Parser with the given tokens\nParses binary operations with proper operator precedence\nParses variable declarations\nParses expressions including assignments and ternary …\nParses function definitions\nParses if-else statements\nParses primary expressions: numbers, identifiers, function …\nParses a complete program\nParses statements: blocks, return statements, and …\nParses unary operations like -x, *x, &amp;x, !x, ++x, –x\nParses while loops\nRepresents a function definition with parameters and entry …\nRepresents instructions that can be executed by the VM\nVirtual machine that executes compiled instructions\nExecutes a printf instruction with format string and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts AST nodes into VM instructions and function …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new VM with given program instructions and …\nRuns the program from start to finish and returns the …")