searchState.loadedDescShard("c4_rust_Al_Jazirah_Al_Hamra", 0, "Lexical analyzer that converts source code into tokens\nRepresents the different types of tokens in the C language\nAdvance to the next character\nConsume the peeked character if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if an identifier is a keyword or normal …\nCreates a new lexer for the given source code\nReturns the next token from the source code\nPeek the next character without advancing\nSkips whitespace characters and comments\nTokenizes the entire source code\nRepresents a node in the Abstract Syntax Tree\nParser for converting tokens into an Abstract Syntax Tree\nMoves to the next token\nReturns the current token without advancing\nExpects a specific token and advances if found, panics …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Parser with the given tokens\nParses binary operations with proper operator precedence\nParses a block of code enclosed in curly braces\nParses variable declarations\nParses expressions including assignments and ternary …\nParses function definitions\nParses if-else statements\nParses primary expressions: numbers, identifiers, function …\nParses a complete program\nParses statements: blocks, return statements, and …\nParses unary operations like -x, *x, &amp;x, !x, ++x, –x\nParses while loops\nReturns the precedence level of an operator\nRepresents a function definition with parameters and entry …\nRepresents instructions that can be executed by the VM\nVirtual machine that executes compiled instructions\nExecutes a printf instruction with format string and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts AST nodes into VM instructions and function …\nGenerates VM instructions for an AST node and pushes the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new VM with given program instructions and …\nRuns the program from start to finish and returns the …")